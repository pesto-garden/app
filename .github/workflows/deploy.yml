name: Test build and release

on:
  # Runs on pushes targeting the default branch
  push:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # Single deploy job since we're just deploying
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"

      - name: Install system dependencies
        run: sudo apt install -y gettext
      - name: Install dependencies
        run: yarn install

      - name: setup env file
        run: |
          echo "PUBLIC_BUILD_ID=`git describe --tags --abbrev=0`+`date '+%Y-%m-%d'`+`git rev-parse --short HEAD`" > .env &&
          echo "PUBLIC_PESTO_DB_URL=https://db.pesto.garden" >> .env && 
          echo "PUBLIC_PLAUSIBLE_HOST=https://stats.pesto.garden" >> .env && 
          echo "PUBLIC_PLAUSIBLE_DOMAIN=app.pesto.garden" >> .env &&
          echo "PUBLIC_SENTRY_DSN=https://d2611ff9ef1f61f8ba31e03e8c120280@o4508561188061184.ingest.de.sentry.io/4508561193107536" >> .env &&
          cat .env

      - name: Run unit tests
        run: yarn test

      - name: Build
        run: yarn build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          VITE_CSP_ALLOWED_CONNECT_SRC: "ws:,*.pesto.garden"

      # from https://github.com/microsoft/playwright/issues/7249#issuecomment-1154603556
      # caching playwright

      # Figures out the version of playwright that's installed.
      # 1. Because we don't know what version yarn will resolve it to, we have
      #    to use `yarn why` to get the actually installed version.
      # 2. Because we're in a workspace, we need to make sure we get the version
      #    for the root and not any children, hence the `grep`. If not using
      #    workspaces, this can be skipped.
      # 3. jq comes pre-installed in the Ubuntu runner, so we use that to get
      #    the correct version string.
      # 4. Finally, we use sed to extract just the version number (eg; '1.22.0')
      # The result is stored in steps.playwright-version.outputs.version
      - name: Get installed Playwright version
        id: playwright-version
        run: echo "::set-output name=version::$(yarn why --json @playwright/test | grep -h 'workspace:.' | jq --raw-output '.children[].locator' | sed -e 's/@playwright\/test@.*://')"

      # Attempt to restore the correct Playwright browser binaries based on the
      # currently installed version of Playwright (The browser binary versions
      # may change with Playwright versions).
      # Note: Playwright's cache directory is hard coded because that's what it
      # says to do in the docs. There doesn't appear to be a command that prints
      # it out for us.
      - uses: actions/cache@v3
        id: playwright-cache
        with:
          path: '~/.cache/ms-playwright'
          key: '${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}'
          # As a fallback, if the Playwright version has changed, try use the
          # most recently cached version. There's a good chance that at least one
          # of the browser binary versions haven't been updated, so Playwright can
          # skip installing that in the next step.
          # Note: When falling back to an old cache, `cache-hit` (used below)
          # will be `false`. This allows us to restore the potentially out of
          # date cache, but still let Playwright decide if it needs to download
          # new binaries or not.
          restore-keys: |
            ${{ runner.os }}-playwright-

      # If the Playwright browser binaries weren't able to be restored, we tell
      # paywright to install everything for us.
      - name: Install Playwright's dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: yarn test:e2e
  
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Create build zip
        run: zip -r pesto-app.zip ./build/

      - name: Release latest
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: false
          make_latest: true
          files: |
            pesto-app.zip
